/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.openscada.vi.model.VisualInterface.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.openscada.vi.model.VisualInterface.util.VisualInterfaceAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VisualInterfaceItemProviderAdapterFactory extends VisualInterfaceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public VisualInterfaceItemProviderAdapterFactory()
    {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.Symbol} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SymbolItemProvider symbolItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.Symbol}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSymbolAdapter()
    {
        if (symbolItemProvider == null)
        {
            symbolItemProvider = new SymbolItemProvider(this);
        }

        return symbolItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.Rectangle} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RectangleItemProvider rectangleItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.Rectangle}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRectangleAdapter()
    {
        if (rectangleItemProvider == null)
        {
            rectangleItemProvider = new RectangleItemProvider(this);
        }

        return rectangleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.Text} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TextItemProvider textItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.Text}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTextAdapter()
    {
        if (textItemProvider == null)
        {
            textItemProvider = new TextItemProvider(this);
        }

        return textItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.Child} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ChildItemProvider childItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.Child}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createChildAdapter()
    {
        if (childItemProvider == null)
        {
            childItemProvider = new ChildItemProvider(this);
        }

        return childItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.XYChild} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XYChildItemProvider xyChildItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.XYChild}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXYChildAdapter()
    {
        if (xyChildItemProvider == null)
        {
            xyChildItemProvider = new XYChildItemProvider(this);
        }

        return xyChildItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.XYContainer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XYContainerItemProvider xyContainerItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.XYContainer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXYContainerAdapter()
    {
        if (xyContainerItemProvider == null)
        {
            xyContainerItemProvider = new XYContainerItemProvider(this);
        }

        return xyContainerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.Position} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PositionItemProvider positionItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.Position}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPositionAdapter()
    {
        if (positionItemProvider == null)
        {
            positionItemProvider = new PositionItemProvider(this);
        }

        return positionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.Line} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LineItemProvider lineItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.Line}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLineAdapter()
    {
        if (lineItemProvider == null)
        {
            lineItemProvider = new LineItemProvider(this);
        }

        return lineItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.Figure} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FigureItemProvider figureItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.Figure}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFigureAdapter()
    {
        if (figureItemProvider == null)
        {
            figureItemProvider = new FigureItemProvider(this);
        }

        return figureItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.SymbolReference} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SymbolReferenceItemProvider symbolReferenceItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.SymbolReference}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSymbolReferenceAdapter()
    {
        if (symbolReferenceItemProvider == null)
        {
            symbolReferenceItemProvider = new SymbolReferenceItemProvider(this);
        }

        return symbolReferenceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StringToStringMapItemProvider stringToStringMapItemProvider;

    /**
     * This creates an adapter for a {@link java.util.Map.Entry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStringToStringMapAdapter()
    {
        if (stringToStringMapItemProvider == null)
        {
            stringToStringMapItemProvider = new StringToStringMapItemProvider(this);
        }

        return stringToStringMapItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.Dimension} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DimensionItemProvider dimensionItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.Dimension}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDimensionAdapter()
    {
        if (dimensionItemProvider == null)
        {
            dimensionItemProvider = new DimensionItemProvider(this);
        }

        return dimensionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.openscada.vi.model.VisualInterface.SystemCursor} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SystemCursorItemProvider systemCursorItemProvider;

    /**
     * This creates an adapter for a {@link org.openscada.vi.model.VisualInterface.SystemCursor}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSystemCursorAdapter()
    {
        if (systemCursorItemProvider == null)
        {
            systemCursorItemProvider = new SystemCursorItemProvider(this);
        }

        return systemCursorItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory()
    {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type)
    {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type)
    {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type)
    {
        if (isFactoryForType(type))
        {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification)
    {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null)
        {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose()
    {
        if (symbolItemProvider != null) symbolItemProvider.dispose();
        if (rectangleItemProvider != null) rectangleItemProvider.dispose();
        if (textItemProvider != null) textItemProvider.dispose();
        if (childItemProvider != null) childItemProvider.dispose();
        if (xyChildItemProvider != null) xyChildItemProvider.dispose();
        if (xyContainerItemProvider != null) xyContainerItemProvider.dispose();
        if (positionItemProvider != null) positionItemProvider.dispose();
        if (lineItemProvider != null) lineItemProvider.dispose();
        if (figureItemProvider != null) figureItemProvider.dispose();
        if (symbolReferenceItemProvider != null) symbolReferenceItemProvider.dispose();
        if (stringToStringMapItemProvider != null) stringToStringMapItemProvider.dispose();
        if (dimensionItemProvider != null) dimensionItemProvider.dispose();
        if (systemCursorItemProvider != null) systemCursorItemProvider.dispose();
    }

}
